#################################################################
#  Date             20/01/2020                                  #
#  Author           Chi Thanh NGUYEN                            #
#                                                               #
#  Copyright (c) 2020 nChain Limited. All rights reserved       #
#################################################################
if(BDKCPackConfig_Include)## Include guard
  return()
endif()
set(BDKCPackConfig_Include TRUE)

message(STATUS "BDK Configure Packaging ...  ") ##

set(CPACK_PACKAGE_VENDOR "Bitcoin Assiciation")
set(CPACK_PACKAGE_VERSION_MAJOR ${BDK_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${BDK_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${BDK_VERSION_PATCH})
set(CPACK_PACKAGE_VERSION ${BDK_VERSION_STRING})

set(CPACK_COMPONENTS_ALL Files bdk_core secp256k1)# To add Examples
if(BDK_BUILD_UNIVALUE)
  set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} univalue)
endif()
if(BDK_BUILD_LEVELDB)
  set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} leveldb)
endif()
set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} Documentation module)


if(NOT CUSTOM_SYSTEM_OS_NAME)## Add -DCUSTOM_SYSTEM_OS_NAME=Ubuntu for example to make the installer name
  set(BDK_CPACK_OS_NAME ${BDK_SYSTEM_OS})
else()
  set(BDK_CPACK_OS_NAME ${CUSTOM_SYSTEM_OS_NAME})
endif()

## Package version is the tagorbranch, or if tagorbranch not confirm semver2, will be the commit hash
set(BDK_PACKAGE_VERSION "v${SOURCE_GIT_COMMIT_TAG_OR_BRANCH}")
string(REGEX MATCH "^v?[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9]+)?$" IS_SEMVER "${SOURCE_GIT_COMMIT_TAG_OR_BRANCH}")
if(NOT IS_SEMVER)
  set(BDK_PACKAGE_VERSION "${SOURCE_GIT_COMMIT_HASH}")
endif()

set(BDK_BASE_PACKAGE_NAME "${CMAKE_PROJECT_NAME}-${BDK_PACKAGE_VERSION}")
string(REPLACE "/" "_" BDK_BASE_PACKAGE_FIXEDNAME "${BDK_BASE_PACKAGE_NAME}") ## Fix the package name in case the branch name contains "/"
if(CMAKE_CONFIGURATION_TYPES)
  set(CPACK_PACKAGE_FILE_NAME "${BDK_BASE_PACKAGE_FIXEDNAME}-${BDK_CPACK_OS_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}-\${CPACK_BUILD_CONFIG}")
else()
  set(CPACK_PACKAGE_FILE_NAME "${BDK_BASE_PACKAGE_FIXEDNAME}-${BDK_CPACK_OS_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}-${CMAKE_BUILD_TYPE}")
endif()

# If -DBDK_IS_BETA=ON
if(BDK_IS_BETA)
  set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}_BETA")
endif()

string(TOLOWER "${CPACK_PACKAGE_FILE_NAME}" CPACK_PACKAGE_FILE_NAME)

set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENCE.txt")
#set(CPACK_RESOURCE_FILE_README "${CMAKE_SOURCE_DIR}/README.md")
#set(CPACK_RESOURCE_FILE_WELCOME "${CMAKE_SOURCE_DIR}/README.md")
set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
#set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_SOURCE_DIR}/README.md")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${CMAKE_PROJECT_NAME} ${BDK_PACKAGE_VERSION} Software Development Kit for advanced cryptographic functionalities")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "${CMAKE_PROJECT_NAME}-${BDK_PACKAGE_VERSION}")
#set(CPACK_PACKAGE_ICON "${CMAKE_SOURCE_DIR}/contrib/BDKLogo.ico")


## Specific NSIS ##################################
set(CPACK_NSIS_MUI_ICON "${CMAKE_SOURCE_DIR}/contrib/BDKLogo.ico")
#set(CPACK_NSIS_MUI_UNIICON "${CMAKE_SOURCE_DIR}/contrib/BDKLogo.ico")
set(CPACK_NSIS_DISPLAY_NAME "${CMAKE_PROJECT_NAME} version ${BDK_PACKAGE_VERSION}")
set(CPACK_NSIS_PACKAGE_NAME "${CMAKE_PROJECT_NAME} ${BDK_PACKAGE_VERSION}")

## Specific source ##################################
set(CPACK_SOURCE_IGNORE_FILES "contrib/;tests/;/\\\\.git/")
set(CPACK_SOURCE_PACKAGE_FILE_NAME "${BDK_BASE_PACKAGE_FIXEDNAME}_source")
