package com.nchain.sesdk;
import java.util.logging.Logger;

/*! \file PackageInfo.java
 *        This file is generated by cmake from PackageInfo.java.in
 *        DO NOT MODIFY
 */
public class PackageInfo {

    private static final Logger LOG = Logger.getLogger("com.nchain.sesdk.PackageInfo");
    private static boolean jniLoaded = false;

    public static boolean loadJNI(){
        return loadJNI(null);
    }

    public static boolean loadJNI(String libraryAbsolutePath){
        if(jniLoaded)
            return jniLoaded;

        try {
            if (libraryAbsolutePath != null) {
                System.load(libraryAbsolutePath);
            } else {
                String libraryName = "${BDK_JAVA_JNI_NAME}";
                if (Integer.getInteger("debug", 0) == 1) {
                    libraryName += "d";
                }
                System.loadLibrary(libraryName);
            }
            jniLoaded = true;
            return jniLoaded;
        }
        catch(Exception e){
            LOG.severe("Unable to load sesdk jni. Error : " + e.toString());
            jniLoaded = false;
            return jniLoaded;
        }
    }

    public static long getPID(){
        String processName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();
        return Long.parseLong(processName.split("@")[0]);
    }

    // PID help to debug jni with "attach to process"
    final static long pid = PackageInfo.getPID();

    /* Version for BDK Java module */
    public final static int BDK_JAVA_VERSION_MAJOR = ${BDK_JAVA_VERSION_MAJOR};
    public final static int BDK_JAVA_VERSION_MINOR = ${BDK_JAVA_VERSION_MINOR};
    public final static int BDK_JAVA_VERSION_PATCH = ${BDK_JAVA_VERSION_PATCH};
    public final static String BDK_JAVA_VERSION_STRING = "${BDK_JAVA_VERSION_STRING}";

    /* Version information inherited from BDK core */
    public final static int BDK_VERSION_MAJOR = ${BDK_VERSION_MAJOR};
    public final static int BDK_VERSION_MINOR = ${BDK_VERSION_MINOR};
    public final static int BDK_VERSION_PATCH = ${BDK_VERSION_PATCH};
    public final static String BDK_VERSION_STRING = "${BDK_VERSION_STRING}";

    public final static String SOURCE_GIT_COMMIT_BRANCH   = "${SOURCE_GIT_COMMIT_BRANCH}";
    public final static String SOURCE_GIT_COMMIT_HASH     = "${SOURCE_GIT_COMMIT_HASH}";
    public final static String SOURCE_GIT_COMMIT_DATETIME = "${SOURCE_GIT_COMMIT_DATETIME}";
    public final static String BDK_BUILD_DATETIME_UTC = "${BDK_BUILD_DATETIME_UTC}";

    public final static int BSV_CLIENT_VERSION_MAJOR    = ${BSV_CLIENT_VERSION_MAJOR};
    public final static int BSV_CLIENT_VERSION_MINOR    = ${BSV_CLIENT_VERSION_MINOR};
    public final static int BSV_CLIENT_VERSION_REVISION = ${BSV_CLIENT_VERSION_REVISION};
    public final static String BSV_VERSION_STRING       = "${BSV_VERSION_STRING}";

    public final static String BSV_GIT_COMMIT_BRANCH   = "${BSV_GIT_COMMIT_BRANCH}";
    public final static String BSV_GIT_COMMIT_HASH     = "${BSV_GIT_COMMIT_HASH}";
    public final static String BSV_GIT_COMMIT_DATETIME = "${BSV_GIT_COMMIT_DATETIME}";

    public final static int BDK_CORE_VERSION_MAJOR = ${BDK_CORE_VERSION_MAJOR};
    public final static int BDK_CORE_VERSION_MINOR = ${BDK_CORE_VERSION_MINOR};
    public final static int BDK_CORE_VERSION_PATCH = ${BDK_CORE_VERSION_PATCH};
    public final static String BDK_CORE_VERSION_STRING = "${BDK_CORE_VERSION_STRING}";
}
