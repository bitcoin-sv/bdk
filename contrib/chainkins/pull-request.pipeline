/*
   The pipeline for pull request cannot build manually. The only way to trigger it is to create/update a pull request.
   Bitbucket will trigger a webhook to jenkins, then it will kick off a build
   If for some reasons another build of the pull request need to run, just change the bitbucket pull request and update,
   i.e add a random line "kick new build" to the description, it will kick off a new build
*/

// Define a common groovy's tool holder
def chainkins

pipeline {
  agent any
  options { disableConcurrentBuilds() } // Strangely this option allow the parallel build

  /**  Set the build trigger filter using Bitbucket Push And Pull Request Plugin on Created/Updated. To make it work, it need to be 'build now' manually for a first time */
  triggers {
    bitBucketTrigger([
      [$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestCreatedActionFilter']],
      [$class: 'BitBucketPPRPullRequestTriggerFilter', actionFilter: [$class: 'BitBucketPPRPullRequestUpdatedActionFilter']]
    ])
  }

  stages {
    // Setting common environment variables for the whole pipeline -----------------------------------------------------------------------
    stage('MASTER ENV'){
      agent any
      steps {
        script {

          chainkins = load("${env.WORKSPACE}/contrib/chainkins/chainkins.groovy")

          def pr_env_file = "${env.WORKSPACE}/contrib/chainkins/pr_env.groovy"
          chainkins.dump_env_pr(pr_env_file)
          CHAINKINS_MASTER_ENV = load(pr_env_file)
          sh label:"Show env variables", script:"cat ${pr_env_file} ; printenv"

        }
      }

      post { always { deleteDir() } }
    }

    // TODO :
    //   move more code block from here to groovy jTool


stage('Distributed Build') { parallel { // =====================================

    stage('Window Build'){ //---------------------------------------------
      agent { label 'slave_vm_win10pro_x64_mvsc' }
      options { skipDefaultCheckout true }//TODO add timeout

      steps {
        step([$class: 'WsCleanup'])

        checkout([
            label : "Clone main repository branch ${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}",
            $class: "GitSCM",
            branches: [[name: "${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}"]],
            userRemoteConfigs: [
                    [credentialsId: "sdklibraries_ssh", refspec: "+refs/heads/${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}:refs/remotes/origin/${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}",url: "${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_SSH}"]
            ]
        ])

        script {
            def windows_env_file = "${env.WORKSPACE}\\contrib\\chainkins\\windows_env.groovy"
            chainkins.dump_buildenv_windows(windows_env_file)
            CHAINKINS_WINDOWS_ENV = load(windows_env_file)
            bat label:"Show env variables", script:"type ${windows_env_file} && set"

            chainkins.pr_checkout_and_rebase_windows("10")

            // Update bitbucket build status (in process)
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              bat label:"Set bitbucket build status in progress", script:"""
                python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_HTTP} --target_commit=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_COMMIT} --jenkins_status=NOT_BUILT --build_href=${env.BITBUCKET_PULL_REQUEST_LINK}
                python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_TARGET_REPO_HTTP} --target_commit=${env.CHAINKINS_TARGET_COMMIT} --jenkins_status=NOT_BUILT
              """
            }

            chainkins.build_on_windows()
            chainkins.runtest_on_windows()
            chainkins.pack_on_windows()
        }
      }

      post {
        always {
          script{

            chainkins.consolidate_test_on_windows()

            junit allowEmptyResults: true, testResults: "${env.CHAINKINS_POSTBUILD_DIRNAME}/*junit*.xml"

            emailext ( // TODO send html msg to slack sdk channel
              to: "${env.CHAINKINS_EMAIL_TO_SEND}",
              subject: "${currentBuild.result} __pr#${env.BITBUCKET_PULL_REQUEST_ID} ${env.CHAINKINS_PR_BITBUCKET_ACTOR} [${env.JENKINS_SLAVE_OS}]",
              body: '${FILE,path="buildpost/email.html"}' // TODO : use generic env instead of hardcoded buildpost
            )

            // Update bitbucket build status
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              bat label:"Update bitbucket build status result", script:"""
                python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_HTTP} --target_commit=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_COMMIT} --jenkins_status=${currentBuild.result} --build_href=${env.BITBUCKET_PULL_REQUEST_LINK}
                python %WINDOWS_CHAINKINS_FILE% --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_TARGET_REPO_HTTP} --target_commit=${env.CHAINKINS_TARGET_COMMIT} --jenkins_status=${currentBuild.result}
              """
            }

          }
        }
      }
    }


    stage('Linux Build'){ //---------------------------------------------
      agent { label 'slave_vm_Ubuntu18_x64_gcc'}
      options { skipDefaultCheckout true }//TODO add timeout

      steps {
        step([$class: 'WsCleanup'])

        checkout([
            label : "Clone main repository branch ${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}",
            $class: "GitSCM",
            branches: [[name: "${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}"]],
            userRemoteConfigs: [
                    [credentialsId: "sdklibraries_ssh", refspec: "+refs/heads/${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}:refs/remotes/origin/${env.CHAINKINS_PR_BITBUCKET_DESTINATION_BRANCH}",url: "${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_SSH}"]
            ]
        ])

        script {
            def linux_env_file = "${env.WORKSPACE}/contrib/chainkins/linux_env.groovy"
            chainkins.dump_buildenv_linux(linux_env_file)
            CHAINKINS_LINUX_ENV = load(linux_env_file)
            sh label:"Show env variables", script:"cat ${linux_env_file} ; printenv"

            chainkins.pr_checkout_and_rebase_linux("10")

            // Update bitbucket build status (in process)
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              sh label:"Set bitbucket build status in progress", script:"""
                python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_HTTP} --target_commit=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_COMMIT} --jenkins_status=NOT_BUILT --build_href=${env.BITBUCKET_PULL_REQUEST_LINK}
                python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_TARGET_REPO_HTTP} --target_commit=${env.CHAINKINS_TARGET_COMMIT} --jenkins_status=NOT_BUILT
              """
            }

            chainkins.build_on_linux()
            chainkins.runtest_on_linux()
            chainkins.pack_on_linux()
        }
      }

      post {
        always {
          script{

            chainkins.consolidate_test_on_linux()

            junit allowEmptyResults: true, testResults: "${env.CHAINKINS_POSTBUILD_DIRNAME}/*junit*.xml"

            emailext ( // TODO send html msg to slack sdk channel
              to: "${env.CHAINKINS_EMAIL_TO_SEND}",
              subject: "${currentBuild.result} __pr#${env.BITBUCKET_PULL_REQUEST_ID} ${env.CHAINKINS_PR_BITBUCKET_ACTOR} [${env.JENKINS_SLAVE_OS}]",
              body: '${FILE,path="buildpost/email.html"}' // TODO : use generic env instead of hardcoded buildpost
            )

            // Update bitbucket build status
            withCredentials([usernamePassword(credentialsId: 'sdklibraries_bitbucket', usernameVariable: 'SDK_USERNAME', passwordVariable: 'SDK_PASSWORD')]) {
              sh label:"Update bitbucket build status result", script:"""
                python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_REPO_HTTP} --target_commit=${env.CHAINKINS_PR_BITBUCKET_DESTINATION_COMMIT} --jenkins_status=${currentBuild.result} --build_href=${env.BITBUCKET_PULL_REQUEST_LINK}
                python $LINUX_CHAINKINS_FILE --update_bitbucket_build_status --bb_username=${SDK_USERNAME} --bb_password=${SDK_PASSWORD} --target_repo=${env.CHAINKINS_TARGET_REPO_HTTP} --target_commit=${env.CHAINKINS_TARGET_COMMIT} --jenkins_status=${currentBuild.result}
              """
            }
          }
        }
      }

    }

}} // parallelized stage ========================================================

  }
}